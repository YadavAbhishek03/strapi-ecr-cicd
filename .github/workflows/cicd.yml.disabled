name: CI/CD - Deploy Strapi on ECS Fargate with Terraform

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  deploy:
    name: Build, Push to ECR, Deploy Infra with Terraform, and Trigger CodeDeploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build Docker Image
      run: |
        docker build -t $ECR_REPOSITORY:latest .
        docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Push Docker Image to ECR
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_ENV

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7

    - name: Terraform Init and Apply
      run: |
        cd terraform
        terraform init
        terraform apply -auto-approve \
          -var="ecr_image_url=$IMAGE_URI" \
          -var="api_token_salt=${{ secrets.STRAPI_API_TOKEN_SALT }}" \
          -var="admin_jwt_secret=${{ secrets.STRAPI_ADMIN_JWT_SECRET }}" \
          -var="transfer_token_salt=${{ secrets.STRAPI_TRANSFER_TOKEN_SALT }}" \
          -var="app_keys=${{ secrets.STRAPI_APP_KEYS }}" \
          -var="ecs_execution_role_arn=${{ secrets.ECS_EXECUTION_ROLE_ARN }}" \
          -var="codedeploy_service_role_arn=${{ secrets.CODEDEPLOY_SERVICE_ROLE_ARN }}"

    - name: Get Latest Task Definition ARN
      id: get_task_def
      run: |
        TASK_ARN=$(aws ecs list-task-definitions \
          --family-prefix strapi-task \
          --sort DESC \
          --max-items 1 \
          --query 'taskDefinitionArns[0]' \
          --output text)
        echo "taskDefinitionArn=$TASK_ARN" >> "$GITHUB_OUTPUT"

    - name: Trigger CodeDeploy Deployment
      run: |
        TASK_DEF="${{ steps.get_task_def.outputs.taskDefinitionArn }}"

        echo "Generating AppSpec file..."
        cat <<EOF > appspec.json
        {
          "version": 1,
          "Resources": [
            {
              "TargetService": {
                "Type": "AWS::ECS::Service",
                "Properties": {
                  "TaskDefinition": "$TASK_DEF",
                  "LoadBalancerInfo": {
                    "ContainerName": "abhi-strapi",
                    "ContainerPort": 1337
                  }
                }
              }
            }
          ]
        }
        EOF

        echo "Starting deployment..."
        aws deploy create-deployment \
          --application-name abhi-strapi-codedeploy-app \
          --deployment-group-name abhi-strapi-deploy-group \
          --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
          --description "Triggered by GitHub Actions on commit $GITHUB_SHA" \
          --revision "$(jq -nc --argjson content "$(cat appspec.json | jq .)" '{
              revisionType: "AppSpecContent",
              appSpecContent: {
                content: ($content | tostring)
              }
            }')"
