name: CI/CD - Deploy Strapi on ECS Fargate with Terraform

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  deploy:
    name: Build Docker Image, Push to ECR & Deploy Infra with Terraform
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build Docker Image
      run: |
        echo "Building Docker image for repository: $ECR_REPOSITORY"
        docker build -t $ECR_REPOSITORY:latest .
        docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Set IMAGE_URI environment variable
      run: echo "IMAGE_URI=${ECR_REGISTRY}/${ECR_REPOSITORY}:latest" >> $GITHUB_ENV

    - name: Push Docker Image to ECR
      run: |
        echo "Pushing Docker image to ECR"
        docker push $IMAGE_URI

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7

    - name: Terraform Init, Plan and Apply
      run: |
        cd terraform
        terraform init
        terraform apply -auto-approve \
          -var="ecr_image_url=${IMAGE_URI}" \
          -var="api_token_salt=${{ secrets.STRAPI_API_TOKEN_SALT }}" \
          -var="admin_jwt_secret=${{ secrets.STRAPI_ADMIN_JWT_SECRET }}" \
          -var="transfer_token_salt=${{ secrets.STRAPI_TRANSFER_TOKEN_SALT }}" \
          -var="app_keys=${{ secrets.STRAPI_APP_KEYS }}"


    - name: Trigger CodeDeploy Deployment
      run: |
        TASK_ARN="${{ steps.get_task_def.outputs.taskDefinitionArn }}"
        
          echo '{
            "version": "1.0",
            "Resources": [{
              "TargetService": {
                "Type": "AWS::ECS::Service",
                "Properties": {
                  "TaskDefinition": "'"$TASK_ARN"'",
                  "LoadBalancerInfo": {
                    "ContainerName": "strapi",
                    "ContainerPort": 1337
                  }
                }
              }
            }]
          }' > appspec.json
        
          aws deploy create-deployment \
            --application-name strapi-app-deploy \
            --deployment-group-name strapi-deploy-group \
            --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
            --region us-east-1 \
            --revision "revisionType=AppSpecContent,appSpecContent={content=$(cat appspec.json | jq -Rs .)}"
        
