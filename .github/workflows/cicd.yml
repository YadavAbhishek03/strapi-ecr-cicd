name: CI/CD - Deploy Strapi on ECS Fargate with Terraform

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  deploy:
    name: Build Docker Image, Push to ECR & Deploy Infra with Terraform
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build Docker Image
      run: |
        echo "Building Docker image for repository: $ECR_REPOSITORY"
        docker build -t $ECR_REPOSITORY:latest .
        docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Set IMAGE_URI environment variable
      run: echo "IMAGE_URI=${ECR_REGISTRY}/${ECR_REPOSITORY}:latest" >> $GITHUB_ENV

    - name: Push Docker Image to ECR
      run: |
        echo "Pushing Docker image to ECR"
        docker push $IMAGE_URI

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7

    - name: Terraform Init, Plan and Apply
      run: |
        cd terraform
        terraform init
        terraform apply -auto-approve \
          -var="ecr_image_url=${IMAGE_URI}" \
          -var="api_token_salt=${{ secrets.STRAPI_API_TOKEN_SALT }}" \
          -var="admin_jwt_secret=${{ secrets.STRAPI_ADMIN_JWT_SECRET }}" \
          -var="transfer_token_salt=${{ secrets.STRAPI_TRANSFER_TOKEN_SALT }}" \
          -var="app_keys=${{ secrets.STRAPI_APP_KEYS }}"

    - name: Get Latest ECS Task Definition
      id: get_task_def
      run: |
        TASK_ARN=$(aws ecs list-task-definitions \
          --family-prefix strapi-task \
          --sort DESC \
          --max-items 1 \
          --query 'taskDefinitionArns[0]' \
          --output text)
        echo "taskDefinitionArn=$TASK_ARN" >> "$GITHUB_OUTPUT"

    - name: Trigger CodeDeploy Deployment
      run: |
        TASK_DEF="${{ steps.get_task_def.outputs.taskDefinitionArn }}"

        echo "Generating AppSpec content..."
        APPSPEC_CONTENT=$(jq -n --arg taskdef "$TASK_DEF" '
        {
          version: "1.0",
          Resources: [{
            TargetService: {
              Type: "AWS::ECS::Service",
              Properties: {
                TaskDefinition: $taskdef,
                LoadBalancerInfo: {
                  ContainerName: "abhi-strapi",
                  ContainerPort: 1337
                }
              }
            }
          }]
        }')

        echo "Triggering CodeDeploy deployment..."
        aws deploy create-deployment \
          --application-name abhi-strapi-codedeploy-app \
          --deployment-group-name abhi-strapi-deploy-group \
          --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
          --revision "revisionType=AppSpecContent,appSpecContent={content=$(echo "$APPSPEC_CONTENT" | jq -Rs .)}" \
          --region $AWS_REGION
